
AWSTemplateFormatVersion: "2010-09-09"
Description: "Load balanced autoscaled EC2 instances in a VPC with DynamoDB"
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
  MinCount:
    Description: Minimum EC2 instances in the Auto Scaling group
    Type: Number
    Default: 2
  MaxCount:
    Description: Maximum EC2 instances in the Auto Scaling group
    Type: Number
    Default: 4
Mappings:
  RegionAMIMap:
    us-east-1:
      AMI: ami-0a1179631ec8933d7
    us-east-2:
      AMI: ami-080e449218d4434fa
    us-west-2:
      AMI: ami-086f060214da77a16
Resources:
  #VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  #Internet Gateway
  InternetGW:
    Type: AWS::EC2::InternetGateway

  #Public Subnets
  Public1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
  Public2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  #Private Subnets
  Private1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private1Subnet2
  Private2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private2Subnet

  #Route Tables
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  Private1RT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  Private2RT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  #Internet Gateway Route
  InternetGWRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGW
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW

  #NAT Gateway
  NGW1Subnet1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT1EIP1.AllocationId
      SubnetId: !Ref Public1Subnet
  NGW2Subnet2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT2EIP2.AllocationId
      SubnetId: !Ref Public2Subnet
  NAT1EIP1:
    Type: AWS::EC2::EIP
  NAT2EIP2:
    Type: AWS::EC2::EIP

  #Private Route
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Private1RT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NGW1Subnet1
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Private2RT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NGW2Subnet2

  #Route Table Associations
  PublicSubnet1RT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public1Subnet
      RouteTableId: !Ref PublicRT
  PublicSubnet2RT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public2Subnet
      RouteTableId: !Ref PublicRT

  PrivateSubnet1RT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Private1Subnet
      RouteTableId: !Ref Private1RT
  PrivateSubnet2RT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Private2Subnet
      RouteTableId: !Ref Private2RT
  IGWAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGW
      VpcId: !Ref VPC

  # Security Group for the Application Load Balancer
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Application LoadBalancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allow all traffic on port 80

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref Public1Subnet
        - !Ref Public2Subnet

  ListenerALB:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG

  # Target Group for the Auto Scaling Group
  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 8501
      Protocol: HTTP
      Targets: [] # Targets will be automatically added by the ASG

  # Security Group for the EC2 Instances
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          SourceSecurityGroupId: !Ref ALBSG

  # Launch Template for the Auto Scaling Group
  ASGLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "ASG_LaunchTemplate"
      LaunchTemplateData:
        ImageId: !FindInMap [RegionAMIMap, !Ref "AWS::Region", AMI]
        IamInstanceProfile:
          Name: !Ref AppEc2InstanceProfile
        InstanceType: !Ref InstanceType
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false
            Groups:
              - !Ref WebServerSG
            DeleteOnTermination: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            yum install -y ruby
            yum install -y wget
            echo "Listen 8501" | tee -a /etc/httpd/conf/httpd.conf
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Temporary Content</h1>" > /var/www/html/index.html
            yum erase codedeploy-agent -y
            cd ~
            wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            systemctl status codedeploy-agent
            curl https://s3.us-west-2.amazonaws.com/aws-xray-assets.us-west-2/xray-daemon/aws-xray-daemon-3.x.rpm -o xray.rpm
            yum install -y xray.rpm
            yum remove awscli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install


        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: App
                Value: Sample
              - Key: Env
                Value: Prod
              - Key: PatchGroup
                Value: Application Servers
              - Key: Name
                Value: app-server
  AppEc2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref AppEc2Role
  AppEc2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      RoleName: AppEc2Role
      Description: Allows EC2 instances to call AWS services on your behalf.
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Policies:
        - PolicyName: customMetricPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                  - cloudwatch:PutMetricData
                  - logs:PutLogEvents
                  - logs:PutMetricFilter
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:CreateLogDelivery
                  - logs:CreateDelivery
                Resource: "*"
        - PolicyName: dynamodbAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DynamoProductTable
        - PolicyName: bedrockAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockClaudeAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - arn:aws:bedrock:*::foundation-model/*anthropic*claude*haiku*
                  - arn:aws:bedrock:*:*:inference-profile/*anthropic*claude*haiku*
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:ListFoundationModels
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - aws-marketplace:ViewSubscriptions
                  - bedrock:ListCustomModels 
                  - bedrock:ListModelCustomizationJobs
                  - bedrock:ListProvisionedModelThroughput
                  - bedrock:CreateFoundationModelAgreement
                  - bedrock:GetFoundationModelAvailability
                  - bedrock:GetModelInvocationLoggingConfiguration
                  - bedrock:ListFoundationModelSubscriptionRequests
                  - bedrock:CreateModelInvocationLoggingConfiguration
                  - bedrock:DeleteModelInvocationLoggingConfiguration               
                Resource: "*"
      Tags:
        - Key: Name
          Value: app-ec2-role
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "ASG"
      MinSize: !Ref MinCount # Set minimum number of instances to 2
      MaxSize: !Ref MaxCount # Set maximum number of instances to 4
      TargetGroupARNs:
        - !Ref ALBTG
      VPCZoneIdentifier:
        - !Ref Private1Subnet
        - !Ref Private2Subnet
      LaunchTemplate:
        LaunchTemplateId: !Ref ASGLT
        Version: !GetAtt ASGLT.LatestVersionNumber
      HealthCheckType: ELB
  DynamoProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DynamoProductTable
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "Product"
          AttributeType: "S"
        - AttributeName: "Reviewer"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Product"
          KeyType: "HASH"
        - AttributeName: "Reviewer"
          KeyType: "RANGE"
  InitializeDynamoDB:
    Type: Custom::InitFunction
    DependsOn: DynamoProductTable
    Properties:
      ServiceToken:
        Fn::GetAtt: [DynamoDBInitFunction, "Arn"]
      DynamoTableName: DynamoProductTable
  DynamoDBInitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >

          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const {
            DynamoDBDocumentClient,
            PutCommand,
          } = require("@aws-sdk/lib-dynamodb");
          const response = require("cfn-response");

          const client = new DynamoDBClient({});
          const dynamo = DynamoDBDocumentClient.from(client);

          exports.handler =  (event, context) => {
            console.log(event.ResourceProperties.DynamoTableName);
            dynamo.send(
                    new PutCommand({
                        TableName: event.ResourceProperties.DynamoTableName,
                        Item:{
                          Product: "iPhone 15 Pro",
                          Reviewer: "john.doe@email.com",
                          Review: "Light weight, good performance. Slow charging, heats easily, expensive"
                        }
                    })
            ).then(()=> {
                   response.send(event, context, "SUCCESS", {});
            }).catch((err) => {
                console.log(err);
                response.send(event, context, "FAILED", {});
            });
            };

      Handler: index.handler
      Role:
        Fn::GetAtt: [DynamoDBInitLambdaRole, "Arn"]
      Runtime: nodejs20.x
      Timeout: 60
  DynamoDBInitLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DynamoProductTable
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ALB.DNSName
  ASGName:
    Description: "Auto Scaling Group Name"
    Value: !Ref ASG
    Export:
      Name: "ASG-Name"
  TargetGroupName:
    Description: "Target Group Name"
    Value: !GetAtt ALBTG.TargetGroupName
    Export:
      Name: "TG-Name"